#!/usr/bin/env perl

###################################################################
# scalpel
#
# Scalpel is a software package for detecting INDELs 
# (INsertions and DELetions) mutations for next-generation 
# sequencing data (e.g., Illumina). 
# It supports three modes of operation: single, denovo, and somatic
# 
#  Author: Giuseppe Narzisi 
#    Date: December 11, 2013
#
###################################################################

use warnings;
use strict;
use POSIX;
use FindBin qw($Bin);
use lib $Bin; # add $Bin directory to @INC
use Usage;
use SequenceIO;
use Utils qw(:DEFAULT $findVariants $findDenovos $findSomatic $bamtools);
#use File::Path qw(make_path);

use Utils;
use Getopt::Long;
use File::Copy;

$|=1;

my $help;
my $VERBOSE = 0;

my $single  = 0; # single exome study 
my $denovo  = 0; # family study (mom,dad,affected,sibling)
my $somatic = 0; # normal/tumor study

# required arguments
my $BAMFILE;
my $DBFILE;
my $BAMNORMAL;
my $BAMTUMOR;
my $BAMDAD;
my $BAMMOM;
my $BAMAFF;
my $BAMSIB;
my $BEDFILE;
my $REF;

my $defaults = getDefaults();  

# optional arguments
my $kmer = $defaults->{kmer};
my $cov_threshold = $defaults->{cov_threshold};
my $tip_cov_threshold = $defaults->{tip_cov_threshold};
my $radius = $defaults->{radius};
my $windowSize = $defaults->{windowSize};
my $max_reg_cov = $defaults->{max_reg_cov};
my $delta = $defaults->{delta};
my $map_qual = $defaults->{map_qual};
my $maxmismatch = $defaults->{maxmismatch};
my $covratio = $defaults->{covratio};
my $WORK  = $defaults->{WORK};
my $MAX_PROCESSES = $defaults->{MAX_PROCESSES};
my $sample = $defaults->{sample};
my $selected = $defaults->{selected};
my $dfs_limit = $defaults->{pathlimit};
my $normalContaminationFraction = $defaults->{contaminant_fraction_normal};
my $rand_seed = $defaults->{rand_seed};

# output arguments
my $intarget;
my $logs;
my $twopass;
my $min_cov = $defaults->{min_cov};
my $max_cov = $defaults->{max_cov};
my $minCovInMatch = $defaults->{matched_cov};
my $min_chi2 = $defaults->{minchi2};
my $max_chi2 = $defaults->{maxchi2};
my $outratio = $defaults->{outratio};
my $outformat = $defaults->{format};
my $SVtype  = $defaults->{SVtype};

my $argcnt = scalar(@ARGV);
my $start_time = time;

my $version_num = $defaults->{version_num};

#####################################################
#
# Message about this program and how to use it
#
sub header() {
print STDERR <<END;

Program: scalpel-discovery (micro-assembly variant detection)
Version: $version_num
Contact: Giuseppe Narzisi <gnarzisi\@nygenome.org>
END
}

#####################################################
#
# Message about this program and how to use it
#
sub usage() {
	
header();
	
print STDERR <<END;

usage: scalpel-discovery <COMMAND> [OPTIONS]

COMMAND:

    --help    : this (help) message
    --verbose : verbose mode

    --single  : single exome study 
    --denovo  : family study (mom,dad,affected,sibling)
    --somatic : normal/tumor study

END
exit;
}

#####################################################
#
# Command line options processing
#
GetOptions(
	'help!'    => \$help,
	'verbose!' => \$VERBOSE,
    
	# required parameters
    'single'  => \$single,
    'denovo'  => \$denovo,
    'somatic' => \$somatic,

	# required parameters
    'bam=s'    => \$BAMFILE,
    'normal=s' => \$BAMNORMAL,
    'tumor=s'  => \$BAMTUMOR,
    'dad=s'    => \$BAMDAD,
    'mom=s'    => \$BAMMOM,
    'aff=s'    => \$BAMAFF,
    'sib=s'    => \$BAMSIB,
    'bed=s'    => \$BEDFILE,
    'ref=s'    => \$REF,
    'db=s'     => \$DBFILE,

	# optional paramters
    'kmer=i'       => \$kmer,
    'covthr=i'     => \$cov_threshold,
    'lowcov=i'     => \$tip_cov_threshold,
    'mincov=i'     => \$min_cov,
    'maxcov=i'     => \$max_cov,
    'matchedcov=i' => \$minCovInMatch,
#    'normalContamination=f' => \$normalContaminationFraction,
    'minchi2=f'    => \$min_chi2,	
    'maxchi2=f'    => \$max_chi2,	
    'covratio=f'   => \$covratio,
    'outratio=f'   => \$outratio,
    'radius=i'     => \$radius,
    'window=i'     => \$windowSize,
    'maxregcov=i'  => \$max_reg_cov,
    'step=i'       => \$delta,
    'mapscore=i'   => \$map_qual,
    'mismatches=i' => \$maxmismatch,
    'pathlimit=i'  => \$dfs_limit,
    'dir=s'        => \$WORK,
    'numprocs=i'   => \$MAX_PROCESSES,
    'sample=s'     => \$sample,
    'coords=s'     => \$selected,
	'format=s'     => \$outformat,
	'type=s'       => \$SVtype,
	'intarget!'    => \$intarget,
	'logs!'   	   => \$logs,
	'two-pass!'    => \$twopass,
	'seed=i'       => \$rand_seed,

) or usage();

#####################################################
#
# Initilization 
#
sub init()
{
	#print STDERR "argcnt = $argcnt\n";
	usage() if ($argcnt < 1);	
	usage() if ($help && ($argcnt==1));	
		
	if( ($single==0) && ($denovo==0) && ($somatic==0) ) { 
		print STDERR "Command required!\n";
		usage(); 
	}
	else {
		
		my $ABS_WORK = File::Spec->rel2abs($WORK);
		
		#if($export==0) {
		#	make_path("$ABS_WORK") if ! -r $ABS_WORK;
		#}
		
		if($single)  {
			if ($argcnt < 2) {
				header(); 
				usageSingle("scalpel-discovery --single");
			}
			usageSingle("scalpel-discovery --single") if ($help);
			if( (!defined $BAMFILE) || (!defined $BEDFILE) || (!defined $REF) ) { 
				print STDERR "Required parameter missing!\n";
				header(); 
				usageSingle("scalpel-discovery --single");   
			}
			else{ # run FindVariants.pl on input parameters
				header(); # print header
				
				#create main output dir
				mkdir $ABS_WORK if ! -r $ABS_WORK;	
				
				my $command = "$findVariants ".
					"--bam $BAMFILE ".
					"--bed $BEDFILE ".
					"--ref $REF ".
					"--kmer $kmer ". 
					"--covthr $cov_threshold ". 
					"--lowcov $tip_cov_threshold ".
					"--mincov $min_cov ".
					"--covratio $covratio ".
					"--outratio $outratio ".
					"--radius $radius ".
					"--window $windowSize ".
					"--maxregcov $max_reg_cov ".
					"--step $delta ".
					"--mapscore $map_qual ".
					"--mismatches $maxmismatch ".
					"--pathlimit $dfs_limit ".
					"--dir $ABS_WORK ".
					"--numprocs $MAX_PROCESSES ".
					"--format $outformat ".
					"--seed $rand_seed ".
					"--coords $selected";
				if($VERBOSE) { $command .= " --verbose"; }
				if($intarget) { $command .= " --intarget"; }
				if($logs) { $command .= " --logs"; }
			
				print STDERR "Command: $command\n" if($VERBOSE);
				print STDERR "\n***START ANALYSIS***\n";
				runCmd("FindVariants", $command);
			}
		}
		if($denovo)  { 
			if ($argcnt < 2) {
				header(); 
				usageDenovo("scalpel-discovery --denovo");
			}
			usageDenovo("scalpel-discovery --denovo") if ($help);
			if( (!defined $BAMDAD) || (!defined $BAMMOM) || (!defined $BAMAFF) || (!defined $BAMSIB) || (!defined $BEDFILE) || (!defined $REF) ) { 
				print STDERR "Required parameter missing!\n";
				header(); 
				usageDenovo("scalpel-discovery --denovo");   
			}
			else{ # run FindDenovos.pl on input parameters
				header(); # print header
			
				#create main output dir
				mkdir $ABS_WORK if ! -r $ABS_WORK;			
			
				# run general analysis
				my $DIR_main = "$ABS_WORK/main";
				my $command_main = "$findDenovos ".
					"--dad $BAMDAD ".
					"--mom $BAMMOM ".
					"--aff $BAMAFF ".
					"--sib $BAMSIB ".
					"--bed $BEDFILE ".
					"--ref $REF ".
					"--kmer $kmer ". 
					"--covthr $cov_threshold ". 
					"--lowcov $tip_cov_threshold ".
					"--mincov $min_cov ".
					"--covratio $covratio ".
					"--outratio $outratio ".
					"--radius $radius ".
					"--window $windowSize ".
					"--maxregcov $max_reg_cov ".
					"--step $delta ".
					"--mapscore $map_qual ".
					"--mismatches $maxmismatch ".
					"--pathlimit $dfs_limit ".
					"--dir $DIR_main ".
					"--numprocs $MAX_PROCESSES ".
					"--format $outformat ".
					"--seed $rand_seed ".
					"--coords $selected";
				if($VERBOSE) { $command_main .= " --verbose"; }
				if($intarget) { $command_main .= " --intarget"; }
				if($logs) { $command_main .= " --logs"; }
				
				print STDERR "Command: $command_main\n" if($VERBOSE);
				print STDERR "\n***MAIN ANALYSIS***\n";
				runCmd("FindDenovos", $command_main);
			
				if($twopass) {
			
					# extract coordinates of candidate mutation
					#my $infile = "";
					#if ($outformat eq "annovar") { $infile = "$DIR_main/denovo.${min_cov}x.indel.annovar"; }
					#elsif ($outformat eq "vcf") { $infile  = "$DIR_main/denovo.${min_cov}x.indel.vcf"; }				
					#my $outfile = "$DIR_main/coords.txt";
					#extractCoords($infile, $outfile);
				
					my $dbfile = "$DIR_main/denovos.db";
					my $outfile = "$DIR_main/coords.txt";
					my $num_calls = extractCoordsDB($dbfile, $BEDFILE, $intarget, $outfile);				
					if ($num_calls == 0) {
						print STDERR "No candidate calls to validate. Nothing to do! exit.\n";

						if (-e "$ABS_WORK/main/denovos.db.dir") {
							# copy denovos DB over twopass direcotry (needed to correctly extract sample name info for empty VCF file)
							mkdir "$ABS_WORK/twopass" if ! -r "$ABS_WORK/twopass";
							copy("$ABS_WORK/main/denovos.db.dir","$ABS_WORK/twopass/denovos.db.dir") or die "Copy failed: $!";
							copy("$ABS_WORK/main/denovos.db.lock","$ABS_WORK/twopass/denovos.db.lock") or die "Copy failed: $!";
							copy("$ABS_WORK/main/denovos.db.pag","$ABS_WORK/twopass/denovos.db.pag") or die "Copy failed: $!";
						}
						exit;
					}
			
					# adjust parameters for validation step (max sensitivity)
					$kmer = 10;
					$map_qual = 0;
					$cov_threshold = 3;
					$tip_cov_threshold = 1;
					$radius = floor($windowSize/2);
					$covratio = 0.0;
					$dfs_limit = 1000000;
			
					# run validation of candidates
					my $DIR_val = "$ABS_WORK/twopass";
					my $command_val = "$findDenovos ".
						"--dad $BAMDAD ".
						"--mom $BAMMOM ".
						"--aff $BAMAFF ".
						"--sib $BAMSIB ".
						"--bed $BEDFILE ".
						"--ref $REF ".
						"--kmer $kmer ". 
						"--covthr $cov_threshold ". 
						"--lowcov $tip_cov_threshold ".
						"--mincov $min_cov ".
						"--covratio $covratio ".
						"--outratio $outratio ".
						"--radius $radius ".
						"--window $windowSize ".
						"--maxregcov $max_reg_cov ".
						"--step $delta ".
						"--mapscore $map_qual ".
						"--mismatches $maxmismatch ".
						"--pathlimit $dfs_limit ".
						"--dir $DIR_val ".
						"--numprocs $MAX_PROCESSES ".
						"--format $outformat ".
						"--seed $rand_seed ".
						"--coords $outfile";
					if($VERBOSE) { $command_val .= " --verbose"; }
					if($intarget) { $command_val .= " --intarget"; }
					if($logs) { $command_val .= " --logs"; }
					$command_val .= " --STcalling";
			
					print STDERR "Command: $command_val\n" if($VERBOSE);
					print STDERR "\n***TWO-PASS PHASE***\n";
					runCmd("FindDenovos", $command_val);
				
					#copy denovo indels to main directory
					if ($outformat eq "annovar") {
						copy("$DIR_val/denovo.indel.annovar","$ABS_WORK/denovo.indel.annovar") or die "Copy failed: $!";
					}
					elsif ($outformat eq "vcf") {				
						copy("$DIR_val/denovo.indel.vcf","$ABS_WORK/denovo.indel.vcf") or die "Copy failed: $!";
					}
				}
			}
		}
		if($somatic) { 
			#header(); usageSomatic("scalpel --somatic"); 
	
			if ($argcnt < 2) {
				header(); 
				usageSomatic("scalpel-discovery --somatic");
			}
			usageSomatic("scalpel-discovery --somatic") if ($help);
			if( (!defined $BAMNORMAL) || (!defined $BAMTUMOR) || (!defined $BEDFILE) || (!defined $REF) ) { 
				print STDERR "Required parameter missing!\n";
				header(); 
				usageSomatic("scalpel-discovery --somatic");   
			}
			else{ # run FindSomatic.pl on input parameters
				header(); # print header
			
				#create main output dir
				mkdir $ABS_WORK if ! -r $ABS_WORK;			
			
				# run general analysis
				my $DIR_main = "$ABS_WORK/main";
				my $command_main = "$findSomatic ".
					"--normal $BAMNORMAL ".
					"--tumor $BAMTUMOR ".
					"--bed $BEDFILE ".
					"--ref $REF ".
					"--kmer $kmer ". 
					"--covthr $cov_threshold ". 
					"--lowcov $tip_cov_threshold ".
					"--mincov $min_cov ".
					"--covratio $covratio ".
					"--outratio $outratio ".
					"--radius $radius ".
					"--window $windowSize ".
					"--maxregcov $max_reg_cov ".
					"--step $delta ".
					"--mapscore $map_qual ".
					"--mismatches $maxmismatch ".
					"--pathlimit $dfs_limit ".
					"--dir $DIR_main ".
					"--numprocs $MAX_PROCESSES ".
					"--format $outformat ".
					"--seed $rand_seed ".
					"--coords $selected";
				if($VERBOSE) { $command_main .= " --verbose"; }
				if($intarget) { $command_main .= " --intarget"; }
				if($logs) { $command_main .= " --logs"; }
			
				print STDERR "Command: $command_main\n" if($VERBOSE);
				print STDERR "\n***MAIN ANALYSIS***\n";
				my $retval = runCmd("FindSomatic", $command_main);
				
				#if($retval < 0) { exit -1; }
			
				if($twopass) {
			
					# extract coordinates of candidate mutation
					#my $infile = "";
					#if ($outformat eq "annovar") { $infile = "$DIR_main/somatic.${min_cov}x.indel.annovar"; }
					#elsif ($outformat eq "vcf") { $infile  = "$DIR_main/somatic.${min_cov}x.indel.vcf"; }
					#my $outfile = "$DIR_main/coords.txt";
					#extractCoords($infile, $outfile);

					my $dbfile = "$DIR_main/somatic.db";
					my $outfile = "$DIR_main/coords.txt";
				
					my $num_calls = extractCoordsDB($dbfile, $BEDFILE, $intarget, $outfile);
					if ($num_calls == 0) {
						print STDERR "No candidate calls to validate. Nothing to do! exit.\n";
						
						if (-e "$ABS_WORK/main/somatic.db.dir") {
							# copy somatic DB over twopass direcotry (needed to correctly extract sample name info for empty VCF file)
							mkdir "$ABS_WORK/twopass" if ! -r "$ABS_WORK/twopass";
							copy("$ABS_WORK/main/somatic.db.dir","$ABS_WORK/twopass/somatic.db.dir") or die "Copy failed: $!";
							copy("$ABS_WORK/main/somatic.db.lock","$ABS_WORK/twopass/somatic.db.lock") or die "Copy failed: $!";
							copy("$ABS_WORK/main/somatic.db.pag","$ABS_WORK/twopass/somatic.db.pag") or die "Copy failed: $!";
						}
						exit;
					}
			
					# adjust parameters for validation step (max sensitivity)
					$kmer = 10;
					$map_qual = 0;
					$cov_threshold = 3;
					$tip_cov_threshold = 1;
					#$windowSize = 300;
					$radius = floor($windowSize/2);
					$covratio = 0.0;
					$dfs_limit = 1000000;
			
					# run validation of candidates
					my $DIR_val = "$ABS_WORK/twopass";
					my $command_val = "$findSomatic ".
						"--normal $BAMNORMAL ".
						"--tumor $BAMTUMOR ".
						"--bed $BEDFILE ".
						"--ref $REF ".
						"--kmer $kmer ". 
						"--covthr $cov_threshold ". 
						"--lowcov $tip_cov_threshold ".
						"--mincov $min_cov ".
						"--covratio $covratio ".
						"--outratio $outratio ".
						"--radius $radius ".
						"--window $windowSize ".
						"--maxregcov $max_reg_cov ".
						"--step $delta ".
						"--mapscore $map_qual ".
						"--mismatches $maxmismatch ".
						"--pathlimit $dfs_limit ".
						"--dir $DIR_val ".
						"--numprocs $MAX_PROCESSES ".
						"--format $outformat ".
						"--seed $rand_seed ".
						"--coords $outfile";
					if($VERBOSE) { $command_val .= " --verbose"; }	
					if($intarget) { $command_val .= " --intarget"; }
					if($logs) { $command_val .= " --logs"; }
					$command_val .= " --STcalling";
			
					print STDERR "Command: $command_val\n" if($VERBOSE);
					print STDERR "\n***TWO-PASS PHASE***\n";
					runCmd("FindSomatic", $command_val);
			
					#copy somatic indels to main directory
					if ($outformat eq "annovar") {
						copy("$DIR_val/somatic.indel.annovar","$ABS_WORK/somatic.indel.annovar") or die "Copy failed: $!";
					}
					elsif ($outformat eq "vcf") {				
						copy("$DIR_val/somatic.indel.vcf","$ABS_WORK/somatic.indel.vcf") or die "Copy failed: $!";
					}
				}
			}
		}
		#print STDERR "\nOutput saved in: $ABS_WORK\n";
	}
}

#####################################################
#
# Initilization 
#
## do the job
##########################################

my $datestring = localtime();
print STDERR "Local date and time: $datestring\n";

init();

##########################################

my $time_taken = time - $start_time;

#if($VERBOSE) {
	elapsedTime($time_taken, "Discovery:");
#}
